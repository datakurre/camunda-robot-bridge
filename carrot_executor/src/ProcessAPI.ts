/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/workspaces/{workspaceId}/processes/{processId}/runs": {
    /**
     * Starts a process run with a new work item.
     *
     * If the request has a body, the body is used as a data payload for a new work item. The payload must be valid JSON (RFC 7159). Even if the body is an array, it is interpreted as a single payload (in this case an array object).
     *
     * If the request has no body, a new work item is created without a payload.
     */
    post: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProcessStartResponse"];
          };
        };
        /** Malformed Arguments */
        400: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
        /** Not Authorized */
        403: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
        /** Internal Error */
        500: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
      };
      /** Data to process. Will be used as a data payload for a new work item. */
      requestBody: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/runs-qs-authorization": {
    /**
     * Proxy for `POST /workspaces/{workspaceId}/processes/{processId}/runs`.
     *
     * Reads WS-KEY from the query string (value of key `token`) instead of the Authorization header.
     *
     * **It is recommended that you use this only if you are unable to modify the headers of your HTTP request.**
     */
    post: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
        };
        query: {
          token: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProcessStartResponse"];
          };
        };
        /** Malformed Arguments */
        400: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
        /** Not Authorized */
        403: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
        /** Internal Error */
        500: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
      };
      /** Data to process. Will be used as a data payload for a new work item. */
      requestBody: {
        content: {
          "application/json": { [key: string]: any };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/runs-batch": {
    /**
     * Starts a process run with multiple work items.
     *
     * The request body is expected to contain multiple work item data payloads. The body must be a valid JSON array (RFC 7159). A new work item is created for each payload (element in the deserialized array).
     */
    post: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProcessStartResponse"];
          };
        };
        /** Malformed Arguments */
        400: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
        /** Not Authorized */
        403: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
        /** Internal Error */
        500: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
      };
      /** Data to process. Array of data items. */
      requestBody: {
        content: {
          "application/json": (
            | { [key: string]: any }
            | string
            | number
            | any[]
          )[];
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/run-request": {
    /**
     * Starts a process run with the provided configuration, by the following rules:
     * * If `type = default`: the process is started based on process default configuration. No parameters.
     * * If `type = storages`: the process is started with work items from given process storages. Additional parameter `storages` required.
     * * If `type = workItemIds`: the process is started with given work items. Additional parameter `workItemIds` required.
     */
    post: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProcessStartResponse"];
          };
        };
        /** Malformed Arguments */
        400: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
        /** Not Authorized */
        403: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
        /** Internal Error */
        500: {
          content: {
            "application/json": components["schemas"]["RobocorpError"];
          };
        };
      };
      /** Process start configuration object. */
      requestBody: {
        content: {
          "application/json":
            | {
                type: "default";
              }
            | {
                type: "storages";
                storages: ("input" | "failed" | "output")[];
              }
            | {
                type: "workItemIds";
                workItemIds: string[];
              };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/pruns": {
    get: {
      parameters: {
        path: {
          workspaceId: string;
        };
        query: {
          state: string;
          limit: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProcessRun"][];
          };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/runs/{processRunId}": {
    /** After triggering the process via API you can monitor the process run status. */
    get: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
          processRunId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProcessRun"];
          };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/runs/{processRunId}/robotRuns": {
    get: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
          processRunId: string;
        };
        query: {
          limit: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["RobotRun"][];
          };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/runs/{processRunId}/robotRuns/{robotRunId}": {
    get: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
          processRunId: string;
          robotRunId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["RobotRun"];
          };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/runs/{processRunId}/robotRuns/{robotRunId}/events": {
    get: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
          processRunId: string;
          robotRunId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["RobotRunEvent"][];
          };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/runs/{processRunId}/robotRuns/{robotRunId}/messages": {
    get: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
          processRunId: string;
          robotRunId: string;
        };
        query: {
          limit: number;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["RobotRunMessage"][];
          };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/runs/{processRunId}/robotRuns/{robotRunId}/artifacts": {
    get: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
          processRunId: string;
          robotRunId: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": components["schemas"]["Artifact"][];
          };
        };
      };
    };
  };
  "/workspaces/{workspaceId}/processes/{processId}/runs/{processRunId}/robotRuns/{robotRunId}/artifacts/{artifactId}/{fileName}": {
    get: {
      parameters: {
        path: {
          workspaceId: string;
          processId: string;
          processRunId: string;
          robotRunId: string;
          artifactId: string;
          fileName: string;
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    RobocorpError: {
      error?: {
        code?: string;
        subCode?: string;
        message?: string;
      };
    };
    ProcessStartResponse: {
      id?: string;
      workItemIds?: string[];
    };
    ProcessRun: {
      id?: string;
      result?: string;
      state?: string;
      errorCode?: string;
      workspaceId?: string;
      duration?: number;
      runNo?: number;
      workItemStats?: {
        totalCount?: number;
        failedCount?: number;
        succeededCount?: number;
      };
      robotRuns?: components["schemas"]["RobotRun"][];
    };
    RobotRun: {
      id?: string;
    };
    Artifact: {
      id?: string;
      fileName?: string;
      fileSIze?: number;
    };
    RobotRunEvent: {
      seqNo?: string;
      timestamp?: string;
      eventType?: number;
      data?: { [key: string]: any };
    };
    RobotRunMessage: {
      seqNo?: number;
      message?: string;
      timestamp?: string;
    };
  };
}

export interface operations {}

export interface external {}
